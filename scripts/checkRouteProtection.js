/**
 * Script para verificar que todas las rutas del backend est√©n protegidas
 * Ejecuci√≥n: node scripts/checkRouteProtection.js
 */

const fs = require('fs');
const path = require('path');

// Configuraci√≥n
const routesDir = path.join(__dirname, '../src/routes');
const ignoredFiles = ['userRoutes.js']; // Archivos que pueden contener rutas p√∫blicas
const securityPatterns = [
  'authenticateToken',
  'authMiddleware',
  'checkRole',
  'auth(',
  'isAuth',
  'verifyToken',
  'middleware.auth'
];

console.log('üîç Verificando protecci√≥n de rutas...');
console.log('=================================');

// Funci√≥n principal
const checkFiles = (dir) => {
  try {
    if (!fs.existsSync(dir)) {
      console.error(`‚ùå El directorio ${dir} no existe`);
      return;
    }

    const files = fs.readdirSync(dir);

    files.forEach(file => {
      // Solo verificar archivos JavaScript
      if (file.endsWith('.js')) {
        const filePath = path.join(dir, file);
        const content = fs.readFileSync(filePath, 'utf8');

        // Verificar si el archivo contiene patrones de seguridad
        const hasSecurityPattern = securityPatterns.some(pattern => content.includes(pattern));

        // Verificar si el archivo est√° en la lista de ignorados
        const isIgnored = ignoredFiles.includes(file);

        if (!hasSecurityPattern && !isIgnored) {
          console.log(`‚ö†Ô∏è  Posible ruta sin protecci√≥n: ${file}`);

          // Verificar l√≠neas que definen rutas
          const lines = content.split('\n');
          console.log('   Rutas encontradas:');

          let routeCount = 0;
          lines.forEach((line, index) => {
            if ((line.includes('router.') || line.includes('app.')) &&
                /\.(get|post|put|delete|patch)\(/.test(line)) {
              routeCount++;
              console.log(`   [L√≠nea ${index + 1}]: ${line.trim()}`);
            }
          });

          if (routeCount === 0) {
            console.log('   No se encontraron definiciones de rutas');
          }

          console.log('');
        } else if (hasSecurityPattern) {
          console.log(`‚úÖ Ruta protegida: ${file}`);
        } else {
          console.log(`‚ÑπÔ∏è Archivo ignorado: ${file}`);
        }
      }
    });

    console.log('\n=================================');
    console.log('‚ú® Verificaci√≥n completada');
  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
  }
};

// Ejecutar verificaci√≥n
checkFiles(routesDir);